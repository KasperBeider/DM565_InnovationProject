{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tobias\\\\Desktop\\\\DM565_InnovationProject\\\\client\\\\src\\\\Navbar.js\",\n  _s = $RefreshSig$();\nimport { Link, useMatch, useResolvedPath } from \"react-router-dom\"; // used to avoid page refreshment every time\nimport React from 'react';\nimport \"./styles/navbar.css\";\n\n/**\r\n * Renders a navigation bar that displays different buttons\r\n * depending on the log-in state of the user.\r\n * @returns React Component\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Navbar() {\n  const user = {\n    loggedIn: true\n  };\n  const loggedInNavbar = /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: \"nav\",\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"site-title\",\n      children: \"Inutilia Emptio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(CustomLink, {\n        to: \"/store\",\n        children: \"Store\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CustomLink, {\n        to: \"/basket\",\n        children: \"Basket\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CustomLink, {\n        to: \"/user\",\n        children: \"My orders\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CustomLink, {\n        to: \"/support\",\n        children: \"Support\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n  const notLoggedInNavbar = /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: \"nav\",\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"site-title\",\n      children: \"Inutilia Emptio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(CustomLink, {\n        to: \"/login\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CustomLink, {\n        to: \"/store\",\n        children: \"Store\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CustomLink, {\n        to: \"/support\",\n        children: \"Support\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n  return user.loggedIn ? loggedInNavbar : notLoggedInNavbar;\n}\n\n// the ...props just ensure that we account for the additional props presented like class name etc.\n_c = Navbar;\nfunction CustomLink(_ref) {\n  _s();\n  let {\n    to,\n    children,\n    ...props\n  } = _ref;\n  const resolvedPath = useResolvedPath(to);\n\n  // end: true ensures that \"to\" path must match completely, i.e. store/pan1 =! store/pan2 but store/pan1 === store/pan1\n  const isActive = useMatch({\n    path: resolvedPath.pathname,\n    end: true\n  });\n\n  // i.e. only set classname of list component to \"active\" if we're in the path of that href\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: isActive ? \"active\" : \"\",\n    children: /*#__PURE__*/_jsxDEV(Link, {\n      to: to,\n      ...props,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n_s(CustomLink, \"Dfq6KH74NsOUUXPzETtO7DGllew=\", false, function () {\n  return [useResolvedPath, useMatch];\n});\n_c2 = CustomLink;\nvar _c, _c2;\n$RefreshReg$(_c, \"Navbar\");\n$RefreshReg$(_c2, \"CustomLink\");","map":{"version":3,"names":["Link","useMatch","useResolvedPath","React","Navbar","user","loggedIn","loggedInNavbar","notLoggedInNavbar","CustomLink","to","children","props","resolvedPath","isActive","path","pathname","end"],"sources":["C:/Users/Tobias/Desktop/DM565_InnovationProject/client/src/Navbar.js"],"sourcesContent":["import { Link, useMatch, useResolvedPath } from \"react-router-dom\" // used to avoid page refreshment every time\r\nimport React from 'react'\r\n\r\nimport \"./styles/navbar.css\"\r\n\r\n/**\r\n * Renders a navigation bar that displays different buttons\r\n * depending on the log-in state of the user.\r\n * @returns React Component\r\n */\r\nexport default function Navbar() {\r\n\r\n    const user = {loggedIn: true}\r\n\r\n    const loggedInNavbar = (\r\n        <nav className=\"nav\">\r\n            <Link to=\"/\" className=\"site-title\">\r\n                Inutilia Emptio\r\n            </Link>\r\n            <ul>\r\n                <CustomLink to=\"/store\">Store</CustomLink>\r\n                <CustomLink to=\"/basket\">Basket</CustomLink>\r\n                <CustomLink to=\"/user\">My orders</CustomLink>\r\n                <CustomLink to=\"/support\">Support</CustomLink>\r\n            </ul>\r\n        </nav> \r\n    )\r\n    \r\n    const notLoggedInNavbar = ( \r\n        <nav className=\"nav\">\r\n            <Link to=\"/\" className=\"site-title\">\r\n                Inutilia Emptio\r\n            </Link>\r\n            <ul>\r\n                <CustomLink to=\"/login\">Login</CustomLink>\r\n                <CustomLink to=\"/store\">Store</CustomLink>\r\n                <CustomLink to=\"/support\">Support</CustomLink>\r\n            </ul>\r\n        </nav> \r\n    )\r\n\r\n    return ( user.loggedIn ? loggedInNavbar : notLoggedInNavbar )\r\n}\r\n\r\n// the ...props just ensure that we account for the additional props presented like class name etc.\r\nfunction CustomLink( {to, children,...props} ){\r\n    const resolvedPath = useResolvedPath(to)\r\n\r\n    // end: true ensures that \"to\" path must match completely, i.e. store/pan1 =! store/pan2 but store/pan1 === store/pan1\r\n    const isActive = useMatch( {path: resolvedPath.pathname, end: true})\r\n\r\n    // i.e. only set classname of list component to \"active\" if we're in the path of that href\r\n    return (\r\n        <li className={isActive ? \"active\" : \"\"}>\r\n            <Link to={to} {...props}>\r\n                {children}\r\n            </Link>\r\n        </li>\r\n    )\r\n}"],"mappings":";;AAAA,SAASA,IAAI,EAAEC,QAAQ,EAAEC,eAAe,QAAQ,kBAAkB,EAAC;AACnE,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,qBAAqB;;AAE5B;AACA;AACA;AACA;AACA;AAJA;AAKA,eAAe,SAASC,MAAM,GAAG;EAE7B,MAAMC,IAAI,GAAG;IAACC,QAAQ,EAAE;EAAI,CAAC;EAE7B,MAAMC,cAAc,gBAChB;IAAK,SAAS,EAAC,KAAK;IAAA,wBAChB,QAAC,IAAI;MAAC,EAAE,EAAC,GAAG;MAAC,SAAS,EAAC,YAAY;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAE5B,eACP;MAAA,wBACI,QAAC,UAAU;QAAC,EAAE,EAAC,QAAQ;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAmB,eAC1C,QAAC,UAAU;QAAC,EAAE,EAAC,SAAS;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAoB,eAC5C,QAAC,UAAU;QAAC,EAAE,EAAC,OAAO;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAuB,eAC7C,QAAC,UAAU;QAAC,EAAE,EAAC,UAAU;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAqB;IAAA;MAAA;MAAA;MAAA;IAAA,QAC7C;EAAA;IAAA;IAAA;IAAA;EAAA,QAEZ;EAED,MAAMC,iBAAiB,gBACnB;IAAK,SAAS,EAAC,KAAK;IAAA,wBAChB,QAAC,IAAI;MAAC,EAAE,EAAC,GAAG;MAAC,SAAS,EAAC,YAAY;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAE5B,eACP;MAAA,wBACI,QAAC,UAAU;QAAC,EAAE,EAAC,QAAQ;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAmB,eAC1C,QAAC,UAAU;QAAC,EAAE,EAAC,QAAQ;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAmB,eAC1C,QAAC,UAAU;QAAC,EAAE,EAAC,UAAU;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAqB;IAAA;MAAA;MAAA;MAAA;IAAA,QAC7C;EAAA;IAAA;IAAA;IAAA;EAAA,QAEZ;EAED,OAASH,IAAI,CAACC,QAAQ,GAAGC,cAAc,GAAGC,iBAAiB;AAC/D;;AAEA;AAAA,KAlCwBJ,MAAM;AAmC9B,SAASK,UAAU,OAA2B;EAAA;EAAA,IAAzB;IAACC,EAAE;IAAEC,QAAQ;IAAC,GAAGC;EAAK,CAAC;EACxC,MAAMC,YAAY,GAAGX,eAAe,CAACQ,EAAE,CAAC;;EAExC;EACA,MAAMI,QAAQ,GAAGb,QAAQ,CAAE;IAACc,IAAI,EAAEF,YAAY,CAACG,QAAQ;IAAEC,GAAG,EAAE;EAAI,CAAC,CAAC;;EAEpE;EACA,oBACI;IAAI,SAAS,EAAEH,QAAQ,GAAG,QAAQ,GAAG,EAAG;IAAA,uBACpC,QAAC,IAAI;MAAC,EAAE,EAAEJ,EAAG;MAAA,GAAKE,KAAK;MAAA,UAClBD;IAAQ;MAAA;MAAA;MAAA;IAAA;EACN;IAAA;IAAA;IAAA;EAAA,QACN;AAEb;AAAC,GAdQF,UAAU;EAAA,QACMP,eAAe,EAGnBD,QAAQ;AAAA;AAAA,MAJpBQ,UAAU;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}